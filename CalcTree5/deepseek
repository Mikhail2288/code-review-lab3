#include <iostream>
#include <fstream>
#include <stack>
#include <vector>
#include <string>

using namespace std;

struct Node {
    int value;
    Node* left;
    Node* right;
    
    Node(int val) : value(val), left(nullptr), right(nullptr) {}
};

Node* buildTreeFromPrefix(const vector<string>& tokens, int& index) {
    if (index >= tokens.size()) return nullptr;
    
    string token = tokens[index++];
    
    if (isdigit(token[0])) {
        return new Node(stoi(token));
    }
    
    Node* node = new Node(-1); // временное значение
    
    if (token == "+") node->value = -1;
    else if (token == "-") node->value = -2;
    else if (token == "*") node->value = -3;
    else if (token == "/") node->value = -4;
    
    node->left = buildTreeFromPrefix(tokens, index);
    node->right = buildTreeFromPrefix(tokens, index);
    
    return node;
}

int evaluate(Node* root) {
    if (!root) return 0;
    
    if (root->value >= 0) {
        return root->value;
    }
    
    int left = evaluate(root->left);
    int right = evaluate(root->right);
    
    switch (root->value) {
        case -1: return left + right;
        case -2: return left - right;
        case -3: return left * right;
        case -4: return left / right;
        default: return 0;
    }
}

Node* transformTree(Node* root) {
    if (!root) return nullptr;
    
    if (root->value == -1 || root->value == -2) {
        int val = evaluate(root);
        delete root->left;
        delete root->right;
        return new Node(val);
    }
    
    root->left = transformTree(root->left);
    root->right = transformTree(root->right);
    
    return root;
}

void printTree(Node* root, int depth = 0) {
    if (!root) return;
    
    printTree(root->right, depth + 1);
    
    for (int i = 0; i < depth; ++i)
        cout << "   ";
    
    if (root->value >= 0)
        cout << root->value << endl;
    else {
        switch (root->value) {
            case -1: cout << "+" << endl; break;
            case -2: cout << "-" << endl; break;
            case -3: cout << "*" << endl; break;
            case -4: cout << "/" << endl; break;
        }
    }
    
    printTree(root->left, depth + 1);
}

vector<string> readTokensFromFile(const string& filename) {
    ifstream file(filename);
    vector<string> tokens;
    string token;
    
    while (file >> token) {
        tokens.push_back(token);
    }
    
    return tokens;
}

int main() {
    string filename = "input.txt"; // имя файла с выражением
    vector<string> tokens = readTokensFromFile(filename);
    
    int index = 0;
    Node* root = buildTreeFromPrefix(tokens, index);
    
    cout << "Original tree:" << endl;
    printTree(root);
    
    root = transformTree(root);
    
    cout << "\nTransformed tree (without + and -):" << endl;
    printTree(root);
    
    return 0;
}
