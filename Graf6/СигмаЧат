#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <set>

int main() {
    // Имя файла с матрицей смежности
    std::string fileName = "FileName.txt";
    std::ifstream file(fileName);
    
    if (!file.is_open()) {
        std::cerr << "Не удалось открыть файл: " << fileName << std::endl;
        return 1;
    }
    
    // Чтение количества городов
    int n;
    file >> n;
    
    // Чтение матрицы смежности
    std::vector<std::vector<int>> matrix(n, std::vector<int>(n));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            file >> matrix[i][j];
        }
    }
    
    file.close();
    
    // Чтение города K и количества пересадок L
    int K, L;
    std::cout << "Введите номер города K (от 1 до " << n << "): ";
    std::cin >> K;
    std::cout << "Введите количество пересадок L: ";
    std::cin >> L;
    
    // Коррекция индексации для внутреннего представления (0-based)
    K--;
    
    // Используем BFS для поиска городов на расстоянии L пересадок от K
    std::vector<int> distances(n, -1); // расстояния от K до всех городов
    std::queue<int> queue;
    
    distances[K] = 0; // расстояние до самого себя = 0
    queue.push(K);
    
    // BFS для нахождения кратчайших путей
    while (!queue.empty()) {
        int current = queue.front();
        queue.pop();
        
        // Если расстояние уже больше L, дальше не идем
        if (distances[current] > L) {
            continue;
        }
        
        // Проверяем все соседние города
        for (int next = 0; next < n; ++next) {
            if (matrix[current][next] == 1 && distances[next] == -1) {
                distances[next] = distances[current] + 1;
                queue.push(next);
            }
        }
    }
    
    // Находим города на расстоянии ровно L пересадок
    std::vector<int> result;
    for (int i = 0; i < n; ++i) {
        if (distances[i] == L + 1) { // L пересадок = L+1 перелетов
            result.push_back(i + 1); // +1 для преобразования обратно к 1-based индексации
        }
    }
    
    // Вывод результатов
    if (result.empty()) {
        std::cout << -1 << std::endl;
    } else {
        for (int city : result) {
            std::cout << city << " ";
        }
        std::cout << std::endl;
    }
    
    return 0;
}
